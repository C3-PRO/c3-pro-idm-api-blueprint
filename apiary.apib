FORMAT: 1A
HOST: https://idm.c3-pro.org/


# C3-PRO IDM API

The C3-PRO Identidy & Demographics Manager (IDM) is an API for server systems that allow to store **subjects** (aka. _patients_, _participants_) in order to create a **link between** user-ids from different systems.
Participants are identified by a so-called _site-specific subject id_ (`SSSID`).
Most commonly such linking is established between subjects enrolled in a clinical trial who use a secondary system, such as a smartphone app, which has its own identifier.

This documentation lists the minimal API and data models that any IDM-compatible system must support.


# Group Subjects

A subject (aka. _participant_ or _patient_) is a person (to be) enrolled in a clinical trial.

All fields but `sssid`, `name` and `bday` are optional.

TODO: determine fields


## Data Structures

### Subject

- sssid: Site Specific Subject ID (string, required)
- name:  John Doe                 (required)
- bday:  `1954-12-10`             (required)


## Subjects [/subject]

+ Attributes (Subject)

### List Subjects [GET]

TODO: paging?

+ Request
    
    + Headers
        
            Authorization: Bearer {...}
    
    + Body

+ Response 200 (application/json)

    + Body
    
            {
                "data": [
                    (Subject),
                    (Subject)
                ]
            }

### Add New Subject [POST]

+ Request (application/json)
    
    + Headers
        
            Authorization: Bearer {...}
    
    + Attributes (Subject)

+ Response 201 (application/json)

    Subject was successfully created.

    + Headers

            Location: /subject/12345

    + Body

            {
                "data": {
                    (Subject)
                }
            }

+ Response 400 (appliaciton/json)

    Invalid request, likely either `sssid` or `name` was missing or empty.
    
    + Body
        
            {
                "error": {
                    "status": 400,
                    "message": "{error message}"
                }
            } 

+ Response 409 (application/json)

    A subject with this `sssid` exists already.

    + Body
        
            {
                "error": {
                    "status": 409,
                    "message": "this SSSID is already taken"
                }
            }


## Individual Subject [/subject/{sssid}]

Operations on an already registered subject, identified by `sssid`.

+ Parameters
    
    - sssid (string) - The site-specific subject ID

### Retrieve Subject Details [GET]

+ Request
    
    + Headers
            
            Authorization: Bearer {...}

+ Response 200 (application/json)
    
    + Body
        
            {
                "data": {
                    (Subject)
                }
            }

+ Response 401 (application/json)

    The authorization token was invalid.
    
    + Body
        
            {
                "error": {
                    "status": 401,
                    "message": "Unauthorized"
                }
            }
    
+ Response 404 (application/json)

    A subject with the given `sssid` does not exist.
    
    + Body
        
            {
                "error": {
                    "status": 404,
                    "message": "Not Found"
                }
            }
        
### Update Subject [PUT]

+ Request (application/json)

    + Headers
            
            Authorization: Bearer {...}
    
    + Attributes (Subject)

+ Response 204

    Subject data was successfully updated. Nothing will be returned.
    
    + Body

+ Response 400 (application/json)

    Something was wrong with the request.
    
    + Body
        
            {
                "error": {
                    "status": 400,
                    "message": "{error message}"
                }
            }

+ Response 401 (application/json)

    The authorization token was invalid.
    
    + Body
        
            {
                "error": {
                    "status": 401,
                    "message": "Unauthorized"
                }
            }

+ Response 409 (application/json)

    There was a conflict updating the subject, most commonly the SSSID was attempted to be changed.
    
    + Body
        
            {
                "error": {
                    "status": 409,
                    "message": "SSSID cannot be changed"
                }
            }


# Group Subject Linking

Linking is achieved by creating a one-time-use “Link”, which is always represented as a [JWT](https://jwt.io) when used outside the system.
These JWT can be sent to external services and apps, who can establish links by using the JWT as an _Authorization_ header while sending a FHIR `Patient` resource, containing the identifier to be linked, in its body.

A `Link`'s JWT is usually signed using **HMAC-SHA-256**.

## Data Structures

### Link

- jti:  3524E85B               (string, required)
- iss:  https://idm.srv.io/    (required)
- exp:  `2016-09-06T14:13:12Z` (required)
- sub:  "John Doe"             (required)
- birthdate: `1954-12-10`      (required)
- linked_with: "SSSID"         (string)
- linked_on: `2016-09-28T14:22:23Z`

## Links [/link/{jti}]

+ Parameters

    - jti (String) - The linkable/JWT identifier; should not give hints about the sssid.

+ Attributes (Link)

### Information about a Link [GET]

+ Request (application/json)

    A GET request to retrieve the JSON part of the JWT.
    
    + Headers
        
            Authorization: Bearer {...}

+ Response 200 (application/json)

    + Body
    
            {
                "data": {
                    (Link)
                }
            }

### Establish Link [PUT]

+ Request (application/json)
    
    The request body is a FHIR `Patient` resource that only needs to include the identifier.
    Provide a `system` for the identifier, which is the URI identifying the App or Service to be linked.
    The `value` is the **id** to be linked.
    
    + Headers
        
            Authorization: Bearer {Link JWT with matching jti}
    
    + Body
    
            {
                "resourceType": "Patient",
                "identifier": [
                    "system": "{system-uri}",
                    "value": "{secondary-id}"
                ]
            }
        
+ Response 204

    Link was successfully created. Nothing will be returned.
    
    + Body

+ Response 400 (application/json)

    Something was wrong with the request.
    
    + Body
        
            {
                "error": {
                    "status": 400,
                    "message": "{error message}"
                }
            }

+ Response 409 (application/json)

    There was a conflict creating the link.
    Most commonly this link (one time use!) or a link between SSSID and an identifier of the given **system** has already been established.
    
    + Body
        
            {
                "error": {
                    "status": 409,
                    "message": "SSSID is already linked to this system"
                }
            }

## Link as JWT [/link/{jti}/jwt]

+ Parameters

    - jti (String) - The linkable/JWT identifier.

### Retrieve JWT [GET]

+ Request

    This is an open request that does not need to be protected.

+ Response 200 (application/jwt)
    
    Returns the JWT in the response body.
    
    + Body
    
            HEAD.BODY.SIGNATURE

+ Response 404 (application/json)

    This link does not exist
    
    + Body
    
            {
                "error": {
                    "status": 404,
                    "message": "The link with this identifier does not exist"
                }
            }

## Links For Subjects [/subject/{sssid}/links]

+ Parameters
    
    - sssid (string) - The site-specific subject ID

### Get All Linkables [GET]

+ Request

    + Headers
        
            Authorization: Bearer {...}

+ Response 200 (application/json)
    
    List all `Link` objects that are tied to the given subject.
    
    + Body
    
            {
                "data": [
                    (Link),
                    (Link),
                    ...
                ]
            }

### Get New Linkable [POST]

A request to receive a new JWT that can be used by another application or system in order to establish a link between the subject's `sssid` and an external identifier.

+ Request (application/json)

    + Headers
            
            Authorization: Bearer {...}

+ Response 200 (application/jwt)

    + Headers
        
            Location: /link/{jti}
    
    + Attributes (Link)
    
    + Body
        
            HEAD.BODY.SIGNATURE
            
